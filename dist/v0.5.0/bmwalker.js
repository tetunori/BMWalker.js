class BMWalker {
  static typeHuman = 0;
  static typeCat = 1;
  static typePigeon = 2;
  static typeBox = 3;

  static maxSpeed = 2.0;
  static minSpeed = -2.0;

  static maxBodyStructure = 6.0; // Type A
  static minBodyStructure = -6.0; // Type B
  static maxWeight = 6.0; // Heavy
  static minWeight = -6.0; // Light
  static maxNervousness = 6.0; // Nervous
  static minNervousness = -6.0; // Relaxed
  static maxHappiness = 6.0; // Happy
  static minHappiness = -6.0; // Sad

  // Constructor
  constructor(type = BMWalker.typeHuman) {
    this.type = type; // 0: human, 1: cat?, 2: pigeon, 3: box(maybe for debug).

    this.tm = new BMWTimer();
    this.starttime = this.tm.getTimer();

    this.mtrx = new BMWMatrix();

    this.speed = 1.0;

    // Walker Parameters
    this.bodyStructure = 0;
    this.weight = 0;
    this.nervousness = 0;
    this.happiness = 0;

    // Camera Parameters
    this.azimuth = 0; // rad
    this.angularVelocity = 0; // rad/sec
    this.elevation = 0; // rad

    // Translation Parameters
    this.flagTranslation = false;

    ////

    this.walker_size = 10;

    this.pixelsperdegree = 37;

    // this.flagTranslation = false;
    this.translation_start = -1000;
    this.translation_end = 1000;
    this.translation_pos = 0;

    this.data_offset_x = 0;
    this.data_offset_y = 0;
    this.data_offset_z = 0;

    //graphical stuff
    this.offsety = 0;
    this.offsetz = 0;

    this.left = 0;
    this.right = 0;
    this.top = 0;
    this.bottom = 0;
    this.spinmatrix = this.mtrx.newIdentMatrix();
    this.dotsize = 3;

    this.motion_vertical_scale = 1;
    this.motion_horizontal_scale = 1;
    this.structure_vertical_scale = 1;
    this.structure_horizontal_scale = 1;

    // this.dotShapes = [];
    // this.linesdrawn = false;

    this.meanwalker = new Array(4);

    this.meanwalker[0] = new Array(
      -10.7519,
      -3.7275,
      -16.4667,
      -65.2177,
      44.6613,
      -16.4667,
      -65.2177,
      44.6613,
      17.761,
      15.8663,
      74.7274,
      -52.4475,
      15.8663,
      74.7274,
      -52.4475,
      0.0,
      0.0,
      183.8203,
      220.4787,
      251.0134,
      -183.8203,
      -220.4787,
      -251.0134,
      0.0,
      94.4979,
      72.718,
      50.9486,
      -94.4979,
      -72.718,
      -50.9486,
      1640.6199,
      1366.6743,
      1402.3211,
      1130.6523,
      907.4477,
      1402.3211,
      1130.6523,
      907.4477,
      1015.0295,
      909.5169,
      524.1089,
      162.3379,
      909.5169,
      524.1089,
      162.3379,
      126.0309,
      -0.0,
      -0.0,
      6.0119,
      18.6533,
      35.1689,
      -6.0119,
      -18.6533,
      -35.1689,
      -0.0,
      0.8558,
      -66.76,
      -0.0014,
      -0.8558,
      66.76,
      0.0014,
      16.7455,
      13.6539,
      14.4562,
      18.2079,
      12.2518,
      14.4562,
      18.2079,
      12.2518,
      11.0806,
      12.7013,
      -11.6385,
      -16.84,
      12.7013,
      -11.6385,
      -16.84,
      -0.0,
      -0.0,
      -2.7469,
      -4.1204,
      3.9073,
      2.7469,
      4.1204,
      -3.9073,
      -0.0,
      6.0561,
      -1.1494,
      -54.9132,
      -6.0561,
      1.1494,
      54.9132,
      1.0,
      0.0,
      0.0,
      -10.5991,
      -81.6328,
      -188.0212,
      10.5991,
      81.6328,
      188.0212,
      0.0,
      7.5198,
      147.7088,
      322.4646,
      -7.5198,
      -147.7088,
      -322.4646,
      5.1627,
      -0.3989,
      0.6821,
      -22.7247,
      -2.6726,
      0.6821,
      -22.7247,
      -2.6726,
      -4.8763,
      -0.3846,
      -5.4519,
      3.1093,
      -0.3846,
      -5.4519,
      3.1093,
      0.0,
      0.0,
      -5.0298,
      5.4083,
      -48.329,
      5.0298,
      -5.4083,
      48.329,
      0.0,
      2.1644,
      21.0489,
      -38.6506,
      -2.1644,
      -21.0489,
      38.6506,
      11.3014,
      5.0464,
      9.7195,
      9.2152,
      4.2044,
      0.0865,
      9.2152,
      4.2044,
      0.0865,
      14.0191,
      14.2109,
      24.09,
      -51.2215,
      14.2109,
      24.09,
      -51.2215,
      -0.0,
      -0.0,
      0.4097,
      -2.1377,
      -0.1669,
      -0.4097,
      2.1377,
      0.1669,
      0.0,
      0.1281,
      3.4136,
      1.5014,
      -0.1281,
      -3.4136,
      -1.5014,
      -2.7192,
      -3.0021,
      -3.5202,
      -5.4154,
      -11.7893,
      -3.5202,
      -5.4154,
      -11.7893,
      -3.3653,
      -4.2122,
      -13.3553,
      29.5052,
      -4.2122,
      -13.3553,
      29.5052,
      0.0,
      -0.7778,
      0.1821,
      -0.2669,
      -1.4476,
      -2.3384,
      -0.2669,
      -1.4476,
      -2.3384,
      0.3083,
      -0.6448,
      -31.9081,
      10.0433,
      -0.6448,
      -31.9081,
      10.0433,
      0.0,
      0.0,
      -0.4651,
      -1.0106,
      -3.2205,
      0.4651,
      1.0106,
      3.2205,
      0.0,
      -0.6521,
      -5.3993,
      -2.6593,
      0.6521,
      5.3993,
      2.6593,
      -20.8947,
      -20.894,
      -20.466,
      -13.9663,
      3.7265,
      -20.466,
      -13.9663,
      3.7265,
      -20.8148,
      -19.3607,
      -12.4748,
      -12.1435,
      -19.3607,
      -12.4748,
      -12.1435,
      0.0
    );
    //new Array(1.726 , 2.005 , -94.530 , -60.218 , -215.354 , -178.508 , -224.202 , -88.733 , 99.665 , 56.943 , 217.556 , 178.477 , 224.215 , -0.549 , 84.935 , 21.781 , 8.999 , -5.082 , -59.490 , 44.959 , -18.623 , -75.620 , 89.449 , -3.941 , -58.375 , 51.061 , -7.152 , -74.107 , -12.411 , 91.005 , 1528.710 , 985.683 , 891.514 , 149.834 , 877.506 , 1366.224 , 1094.033 , 491.494 , 892.284 , 150.152 , 869.144 , 1358.911 , 1088.976 , 1338.648 , 486.922 , 151.917 , -7.834 , -8.728 , -10.485 , 8.823 , -6.398 , -11.529 , -29.581 , 3.141 , -10.471 , 7.963 , -1.749 , -10.822 , -26.338 , -11.434 , 2.714 , -1.204 , -1.204 , -0.610 , -224.377 , 130.364 , 15.316 , 76.716 , -135.130 , -1.592 , 223.096 , -111.221 , -17.185 , -66.873 , -0.893 , 135.672 , 0.125 , 0.111 , 2.010 , 2.522 , 24.437 , 1.910 , -7.495 , -27.132 , -1.817 , -1.820 , -19.912 , -1.758 , 7.271 , 0.101 , 26.942 , 1.000 , -18.000 , -10.452 , -13.867 , 11.957 , -16.807 , -16.822 , -15.854 , 7.390 , -13.815 , 12.199 , -14.376 , -16.489 , -15.652 , -16.336 , 8.316 , -0.106 , 0.254 , 3.735 , 106.567 , 2.763 , 2.078 , 3.912 , 6.409 , -2.962 , -105.080 , -5.609 , -2.554 , -5.643 , -0.201 , -6.388 , -0.149 , -0.062 , 3.053 , -60.341 , -2.756 , -2.889 , -2.703 , -0.598 , -3.218 , 60.146 , 2.519 , 2.494 , 2.987 , -0.156 , 0.209 , 0.000 , 0.046 , 0.033 , 0.055 , -0.635 , -3.920 , 0.290 , -3.754 , -1.561 , 0.004 , 0.501 , 2.669 , 0.047 , 3.451 , 0.174 , 1.499 , -2.588 , -8.995 , -8.631 , 24.202 , 3.746 , -4.648 , -0.393 , 15.827 , -8.544 , 22.933 , 4.141 , -4.423 , -0.441 , -4.807 , 15.536 , 10.376 , 10.363 , 10.352 , -1.143 , 10.841 , 10.963 , 10.178 , 13.693 , 10.328 , -0.244 , 12.358 , 10.996 , 10.423 , 10.705 , 13.584 , 0.000 , 0.077 , -0.060 , -0.111 , -2.006 , -4.330 , -0.392 , -1.071 , -4.761 , -0.182 , 1.447 , 3.448 , 0.352 , 0.268 , -0.022 , 4.766 , 4.100 , 11.302 , 12.601 , -40.721 , -1.334 , 5.840 , 2.062 , 24.543 , 12.606 , -38.794 , -0.624 , 5.376 , 2.142 , 5.993 , 24.622 , 5.895 , 6.029 , 5.942 , 31.323 , -6.916 , 5.265 , 1.709 , -1.390 , 5.809 , 30.685 , -4.154 , 5.579 , 2.859 , 5.664 , -1.871 , 0.000);

    // do not work
    //meanwalker[1] = new Array(267.556, 263.007, 236.843, 285.999, 270.438, 81.342, 66.526, 115.695, 92.808, 356.992, 197.715, 8.959, 267.556, 263.007, 236.843, 81.342, 66.526, 115.695, 0.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, -302.029, -286.731, -230.495, -182.329, -151.317, -301.606, -254.734, -222.982, -148.529, -209.737, -147.599, -139.610, -302.029, -286.731, -230.495, -301.606, -254.734, -222.982, 70.857, 22.689, 7.547, 8.046, 2.845, 3.135, -33.592, -25.853, -17.601, -1.558, 0.714, 2.456, -0.235, -22.689, -7.547, -8.046, 33.592, 25.853, 17.601, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -3.413, -4.884, -2.216, 4.898, 5.943, -6.651, -2.041, -2.663, 0.849, -1.312, 1.877, 4.495, 3.413, 4.884, 2.216, 6.651, 2.041, 2.663, 10.000, 80.946, 73.030, 32.385, 8.504, 0.598, 75.381, 44.785, 26.443, 0.168, -1.295, -0.564, -0.877, -80.946, -73.030, -32.385, -75.381, -44.785, -26.443, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.859, -1.711, -13.161, 3.015, 0.926, -2.000, -14.766, -0.345, 1.165, 0.045, 0.287, -0.131, -0.859, 1.711, 13.161, 2.000, 14.766, 0.345, 0.000, -21.478, -16.859, 0.445, 2.550, 3.536, -14.571, -8.079, -0.346, 3.344, 1.847, 3.655, 2.393, -21.478, -16.859, 0.445, -14.571, -8.079, -0.346, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -0.833, -3.858, -2.506, -5.752, -4.966, 1.416, 7.193, -1.683, 3.183, -6.335, -4.296, -2.479, -0.833, -3.858, -2.506, 1.416, 7.193, -1.683, 0.000, 11.453, 3.750, 7.972, 0.411, -0.879, -13.512, -4.831, -6.610, -0.980, 0.530, -0.472, 0.296, 11.453, 3.750, 7.972, -13.512, -4.831, -6.610, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -1.338, -0.565, -1.681, -2.684, -2.563, -2.135, -3.581, -0.781, -3.581, 2.570, -0.821, -1.336, -1.338, -0.565, -1.681, -2.135, -3.581, -0.781, 0.000);
    this.meanwalker[1] = new Array(
      89.06,
      84.511,
      58.347,
      107.5,
      91.942,
      -97.154,
      -111.97,
      -62.801,
      -85.688,
      178.5,
      19.219,
      -169.54,
      89.06,
      84.511,
      58.347,
      -97.154,
      -111.97,
      -62.801,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      -151.01,
      -135.72,
      -79.481,
      -31.315,
      -0.3025,
      -150.59,
      -103.72,
      -71.968,
      2.4855,
      -58.722,
      3.4155,
      11.404,
      -151.01,
      -135.72,
      -79.481,
      -150.59,
      -103.72,
      -71.968,
      70.857,
      22.689,
      7.547,
      8.046,
      2.845,
      3.135,
      -33.592,
      -25.853,
      -17.601,
      -1.558,
      0.714,
      2.456,
      -0.235,
      -22.689,
      -7.547,
      -8.046,
      33.592,
      25.853,
      17.601,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      -3.413,
      -4.884,
      -2.216,
      4.898,
      5.943,
      -6.651,
      -2.041,
      -2.663,
      0.849,
      -1.312,
      1.877,
      4.495,
      3.413,
      4.884,
      2.216,
      6.651,
      2.041,
      2.663,
      10,
      80.946,
      73.03,
      32.385,
      8.504,
      0.598,
      75.381,
      44.785,
      26.443,
      0.168,
      -1.295,
      -0.564,
      -0.877,
      -80.946,
      -73.03,
      -32.385,
      -75.381,
      -44.785,
      -26.443,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.859,
      -1.711,
      -13.161,
      3.015,
      0.926,
      -2,
      -14.766,
      -0.345,
      1.165,
      0.045,
      0.287,
      -0.131,
      -0.859,
      1.711,
      13.161,
      2,
      14.766,
      0.345,
      0,
      -21.478,
      -16.859,
      0.445,
      2.55,
      3.536,
      -14.571,
      -8.079,
      -0.346,
      3.344,
      1.847,
      3.655,
      2.393,
      -21.478,
      -16.859,
      0.445,
      -14.571,
      -8.079,
      -0.346,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      -0.833,
      -3.858,
      -2.506,
      -5.752,
      -4.966,
      1.416,
      7.193,
      -1.683,
      3.183,
      -6.335,
      -4.296,
      -2.479,
      -0.833,
      -3.858,
      -2.506,
      1.416,
      7.193,
      -1.683,
      0,
      11.453,
      3.75,
      7.972,
      0.411,
      -0.879,
      -13.512,
      -4.831,
      -6.61,
      -0.98,
      0.53,
      -0.472,
      0.296,
      11.453,
      3.75,
      7.972,
      -13.512,
      -4.831,
      -6.61,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      -1.338,
      -0.565,
      -1.681,
      -2.684,
      -2.563,
      -2.135,
      -3.581,
      -0.781,
      -3.581,
      2.57,
      -0.821,
      -1.336,
      -1.338,
      -0.565,
      -1.681,
      -2.135,
      -3.581,
      -0.781,
      0
    );

    //PIGEON
    this.meanwalker[2] = new Array(
      151.657,
      115.513,
      115.086,
      -88.932,
      -86.731,
      -96.055,
      -133.994,
      35.441,
      -31.254,
      20.839,
      -38.143,
      7.032,
      -14.763,
      25.09,
      -7.464,
      19.885,
      -0.817,
      -8.057,
      -34.126,
      -26.043,
      30.752,
      17.119,
      630.364,
      640.531,
      632.458,
      503.034,
      500.521,
      413.254,
      386.095,
      201.538,
      207.795,
      203.2,
      212.428,
      76.605,
      1.492,
      -0.25,
      0.884,
      -2.951,
      -2.031,
      -2.721,
      -3.035,
      -13.878,
      -3.316,
      6.666,
      -2.975,
      11.736,
      12.495,
      13.266,
      30.328,
      29.865,
      22.389,
      21.325,
      0.187,
      -2.308,
      -1.926,
      -2.688,
      -6.074,
      -4.869,
      -5.643,
      0.033,
      -2.564,
      -0.709,
      0.186,
      15.934,
      23.516,
      -19.227,
      -27.16,
      7.0,
      -9.244,
      -9.56,
      -8.903,
      -10.146,
      -3.777,
      -6.76,
      -7.923,
      -85.578,
      -81.723,
      83.983,
      78.686,
      -4.506,
      -4.109,
      -4.019,
      26.619,
      26.032,
      23.463,
      30.543,
      8.056,
      12.008,
      -4.475,
      -3.718,
      2.695,
      2.125,
      2.364,
      -0.841,
      -1.929,
      -1.361,
      -1.599,
      -5.546,
      4.879,
      6.195,
      -8.376,
      0.0,
      17.762,
      17.735,
      17.988,
      4.712,
      4.973,
      3.588,
      3.269,
      -37.828,
      -35.062,
      -32.137,
      -28.162,
      -3.754,
      -3.432,
      -3.292,
      3.336,
      3.396,
      2.936,
      3.579,
      3.051,
      4.664,
      0.794,
      -0.237,
      0.341,
      0.317,
      0.439,
      2.164,
      1.998,
      2.146,
      2.515,
      -8.291,
      5.109,
      -9.628,
      4.401,
      0.0,
      -27.856,
      -28.388,
      -27.729,
      3.179,
      3.154,
      3.018,
      3.191,
      4.862,
      -0.595,
      6.625,
      3.26,
      1.78,
      2.198,
      2.305,
      -0.528,
      -0.863,
      -0.495,
      -0.66,
      0.514,
      6.33,
      0.775,
      -5.592,
      1.852,
      1.557,
      1.186,
      -3.337,
      -3.079,
      -3.304,
      -3.315,
      -10.877,
      -13.295,
      -11.179,
      -12.343,
      0.0
    );

    //BOX
    this.meanwalker[3] = new Array(
      -200,
      200,
      200,
      -200,
      -200,
      200,
      200,
      -200,
      -200,
      -200,
      200,
      200,
      -200,
      -200,
      200,
      200,
      200,
      200,
      200,
      200,
      -200,
      -200,
      -200,
      -200,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    );

    //other walker specific arrays
    //genderaxis = new Array(-1.761 , 3.101 , 15.554 , -10.890 , 0.140 , -11.879 , -53.728 , -7.792 , -7.286 , 12.263 , 6.722 , 6.259 , 42.381 , -1.987 , 16.096 , 9.313 , -8.788 , -23.958 , -9.823 , 4.593 , 14.493 , 14.567 , -9.453 , -25.881 , -13.347 , 9.539 , 16.845 , 17.577 , 11.485 , -5.951 , -6.514 , -15.535 , -16.653 , -0.567 , 3.603 , -10.439 , 19.717 , 0.656 , -14.694 , -1.573 , 5.143 , -6.725 , 20.406 , -2.512 , -0.952 , -1.661 , -4.374 , -2.028 , 1.072 , -3.339 , 1.674 , -3.027 , 4.505 , -0.276 , 0.863 , 3.869 , 0.366 , -2.633 , 4.221 , -2.766 , 6.381 , -2.748 , -0.594 , -0.422 , -1.917 , 41.063 , -0.035 , 23.356 , 15.194 , -1.044 , -2.209 , -11.437 , -2.629 , -3.133 , -1.487 , -17.967 , 0.682 , 0.421 , -2.718 , -0.425 , 9.086 , -2.025 , -4.643 , -2.916 , 3.802 , 0.351 , -3.585 , 2.615 , 3.073 , 0.354 , 6.239 , 0.000 , -16.618 , 2.045 , 6.457 , 2.824 , 1.057 , -12.167 , -5.935 , 10.421 , 5.995 , 2.144 , 5.344 , -11.987 , -4.824 , -11.339 , 13.456 , 0.903 , -0.422 , -1.871, 7.938 , 14.551 , 2.694 , 8.102 , -3.086 , 0.818 , -7.110 , -10.642 , 0.166 , -6.192 , 1.434 , -7.183 , 1.373 , 1.059 , -3.496 , -11.658 , -5.931 , -5.401 , -7.533 , -4.079 , 5.898 , 7.236 , 9.018 , 7.181 , 10.932 , 0.891 , 4.266 , 0.000 , -0.064 , -0.423 , -0.472 , 0.399 , 2.122 , -0.301 , 5.041 , -0.594 , -0.359 , -0.253 , 0.417 , -0.280 , -3.264 , -0.296 , 1.397 , -5.532 , 5.373 , 5.473 , -10.038 , -4.924 , -3.460 , -1.754 , -1.409 , 5.409 , -7.736 , -4.998 , -3.741 , -2.489 , -2.961 , -2.191 , 3.803 , 4.191 , 4.161 , 3.679 , 1.110 , 3.214 , 2.870 , 4.345 , 4.086 , 1.896 , 4.371 , 3.318 , 4.122 , 3.227 , 2.940 , 0.000 , -0.006 , -0.054 , 0.189 , -0.214 , -2.855 , 0.030 , -2.279 , -3.651 , 0.318 , -1.483 , 0.460 , 0.030 , -0.559 , 0.058 , 3.450 , 0.810 , -0.783 , -0.345 , 4.973 , 1.023 , 0.415 , 3.673 , 12.443 , 0.099 , 6.975 , -3.641 , 0.669 , 0.987 , 0.206 , 7.330 , -0.476 , -0.763 , -1.318 , 6.140 , -8.381 , -0.583 , -4.079 , 5.511 , -0.765 , 2.881 , -5.096 , -0.444 , -0.567 , -0.307 , 4.824 , 0.000);
    this.genderaxis = new Array(
      10.8623,
      3.8778,
      3.9664,
      3.8558,
      2.2025,
      3.9664,
      3.8558,
      2.2025,
      -1.9171,
      -2.884,
      -7.7102,
      -5.2328,
      -2.884,
      -7.7102,
      -5.2328,
      0.0,
      0.0,
      2.335,
      5.3521,
      0.897,
      -2.335,
      -5.3521,
      -0.897,
      0.0,
      -4.9207,
      6.1326,
      4.9029,
      4.9207,
      -6.1326,
      -4.9029,
      0.5983,
      -0.8202,
      1.1016,
      2.7433,
      -0.9544,
      1.1016,
      2.7433,
      -0.9544,
      -4.0702,
      -4.5316,
      -1.9174,
      -2.6875,
      -4.5316,
      -1.9174,
      -2.6875,
      -0.8901,
      -0.0,
      -0.0,
      1.3052,
      0.6971,
      -0.5275,
      -1.3052,
      -0.6971,
      0.5275,
      -0.0,
      0.0486,
      1.8272,
      -0.0034,
      -0.0486,
      -1.8272,
      0.0034,
      5.0182,
      3.2044,
      3.5502,
      1.8061,
      -1.3632,
      3.5502,
      1.8061,
      -1.3632,
      -0.1622,
      -1.5986,
      -2.2538,
      0.1693,
      -1.5986,
      -2.2538,
      0.1693,
      -0.0,
      -0.0,
      -1.4349,
      -1.3394,
      -2.9479,
      1.4349,
      1.3394,
      2.9479,
      0.0,
      -1.7222,
      -2.5603,
      -0.7401,
      1.7222,
      2.5603,
      0.7401,
      0.0342,
      0.0,
      0.0,
      0.509,
      10.8093,
      17.5971,
      -0.509,
      -10.8093,
      -17.5971,
      -0.0,
      -0.7687,
      -3.2834,
      -4.1064,
      0.7687,
      3.2834,
      4.1064,
      3.0012,
      0.9954,
      1.0585,
      -0.9536,
      -2.2088,
      1.0585,
      -0.9536,
      -2.2088,
      -0.6656,
      -1.0927,
      -0.3564,
      -0.253,
      -1.0927,
      -0.3564,
      -0.253,
      0.0,
      0.0,
      -1.6205,
      -4.6884,
      -1.35,
      1.6205,
      4.6884,
      1.35,
      0.0,
      -0.242,
      -2.6187,
      -1.3141,
      0.242,
      2.6187,
      1.3141,
      0.3489,
      0.8606,
      -0.4585,
      -0.2759,
      -0.3201,
      -0.6678,
      -0.2759,
      -0.3201,
      -0.6678,
      -1.627,
      -1.4933,
      2.1374,
      1.3728,
      -1.4933,
      2.1374,
      1.3728,
      -0.0,
      -0.0,
      -0.004,
      -0.0821,
      0.3376,
      0.004,
      0.0821,
      -0.3376,
      -0.0,
      0.0052,
      1.3024,
      0.4057,
      -0.0052,
      -1.3024,
      -0.4057,
      -0.1864,
      -0.1545,
      -0.3366,
      -0.1,
      0.2178,
      -0.3366,
      -0.1,
      0.2178,
      -0.1611,
      -0.2455,
      1.9566,
      1.057,
      -0.2455,
      1.9566,
      1.057,
      0.0,
      0.7592,
      0.3554,
      0.3536,
      -0.4256,
      1.0514,
      0.3536,
      -0.4256,
      1.0514,
      -0.248,
      -0.4293,
      1.1763,
      -0.2402,
      -0.4293,
      1.1763,
      -0.2402,
      -0.0,
      -0.0,
      0.0164,
      1.3395,
      0.9135,
      -0.0164,
      -1.3395,
      -0.9135,
      -0.0,
      0.0097,
      -0.2799,
      0.8892,
      -0.0097,
      0.2799,
      -0.8892,
      -0.7663,
      -0.5586,
      -0.6315,
      -1.7429,
      -3.04,
      -0.6315,
      -1.7429,
      -3.04,
      -0.8024,
      -0.8807,
      -1.5672,
      -0.3387,
      -0.8807,
      -1.5672,
      -0.3387,
      0.0
    );
    //weightaxis = new Array(-3.557 , 2.058 , 2.420 , -10.008 , -7.623 , -7.510 , -24.112 , -7.792 , 2.740 , 5.952 , 10.814 , 10.674 , 17.714 , 1.244 , 5.862 , -7.616 , -1.018 , 8.418 , -11.658 , -5.197 , -2.763 , -0.619 , -9.047 , 7.603 , -8.826 , 10.007 , 1.939 , 6.282 , -3.122 , 10.368 , 1.781 , -11.934 , -11.726 , -2.454 , 5.448 , -6.645 , 6.250 , 2.032 , -11.780 , -7.404 , 0.448 , -5.697 , 2.954 , 0.856 , -2.735 , 13.654 , -6.567 , -3.571 , -4.603 , -0.382 , 1.474 , -7.039 , 0.256 , 2.609 , -4.767 , -0.089 , 4.732 , -6.406 , 0.968 , -6.673 , 3.225 , -0.076 , -0.607 , 2.168 , 38.654 , -5.442 , 3.680 , 3.617 , 12.533 , -3.403 , -38.677 , 17.927 , -4.637 , 5.863 , -0.425 , -13.285 , 0.039 , -0.288 , 0.537 , -1.235 , -4.787 , -2.121 , -2.216 , 6.308 , -1.002 , 2.732 , 5.603 , 1.593 , -1.087 , -0.264 , -0.121 , 0.000 , -4.396 , -3.167 , -2.400 , -4.737 , -4.983 , -4.954 , -5.458 , 1.244 , -2.600 , -3.242 , -3.807 , -4.775 , -5.236 , -4.885 , 5.260 , 1.088 , 0.141 , 0.876 , -18.270 , 3.705 , 1.955 , 3.608 , -6.450 , -0.799 , 15.084 , -3.502 , -0.582 , -2.683 , 0.707 , -3.005 , -0.003 , 0.083 , -0.139 , 4.619 , -0.339 , -0.203 , -0.121 , -2.270 , 0.476 , -5.171 , 0.491 , 0.466 , 1.279 , 0.062 , 0.340 , 0.000 , 0.035 , 0.240 , 0.290 , 2.460 , -1.018 , 0.007 , 0.297 , -0.826 , 0.201 , -2.670 , 0.269 , -0.021 , -1.144 , 0.004 , 1.632 , 0.776 , 2.459 , 3.238 , 1.500 , 4.525 , 1.249 , 3.572 , 4.333 , 3.233 , 1.634 , 3.092 , 1.095 , 2.336 , 1.372 , 4.268 , -5.578 , -5.599 , -5.686 , 2.285 , -6.114 , -5.892 , -6.169 , -4.326 , -5.740 , 1.651 , -4.788 , -5.954 , -5.803 , -5.780 , -4.806 , 0.000 , 0.518 , -0.026 , 0.150 , 3.305 , -2.629 , 0.117 , -3.694 , -0.920 , 0.180 , -2.527 , 2.535 , 0.421 , 3.360 , 0.256 , 2.341 , 0.718 , -0.967 , -0.894 , -0.733 , -0.241 , 0.776 , 0.865 , -5.980 , -0.904 , -3.065 , 2.567 , 0.443 , 1.788 , 0.405 , -11.257 , -2.877 , -2.897 , -3.019 , -2.356 , -1.131 , -2.707 , -2.212 , -3.531 , -2.662 , -2.191 , 0.754 , -2.783 , -1.390 , -2.829 , -4.388 , 0.000);
    this.weightaxis = new Array(
      6.973,
      1.7219,
      1.8664,
      3.6496,
      1.494,
      1.8664,
      3.6496,
      1.494,
      -4.5746,
      -4.5191,
      -4.7568,
      0.083,
      -4.5191,
      -4.7568,
      0.083,
      0.0,
      0.0,
      4.7193,
      9.7397,
      6.5968,
      -4.7193,
      -9.7397,
      -6.5968,
      0.0,
      -0.908,
      6.7928,
      4.662,
      0.908,
      -6.7928,
      -4.662,
      0.6928,
      -0.4293,
      -1.076,
      -0.5851,
      -8.5329,
      -1.076,
      -0.5851,
      -8.5329,
      2.0151,
      1.0205,
      2.1133,
      -1.6364,
      1.0205,
      2.1133,
      -1.6364,
      1.6544,
      -0.0,
      -0.0,
      0.8349,
      1.4477,
      2.3256,
      -0.8349,
      -1.4477,
      -2.3256,
      -0.0,
      -0.266,
      -0.0705,
      0.0047,
      0.266,
      0.0705,
      -0.0047,
      5.032,
      3.6561,
      3.8121,
      2.4318,
      -0.6998,
      3.8121,
      2.4318,
      -0.6998,
      1.1141,
      -0.3861,
      -3.9991,
      0.0932,
      -0.3861,
      -3.9991,
      0.0932,
      -0.0,
      -0.0,
      -1.087,
      -1.0509,
      -1.3231,
      1.087,
      1.0509,
      1.3231,
      0.0,
      -1.3526,
      -1.8515,
      -0.4634,
      1.3526,
      1.8515,
      0.4634,
      0.025,
      0.0,
      0.0,
      -1.1266,
      13.0445,
      27.9505,
      1.1266,
      -13.0445,
      -27.9505,
      -0.0,
      -1.7115,
      -6.304,
      -6.5835,
      1.7115,
      6.304,
      6.5835,
      3.0768,
      0.6769,
      0.5214,
      0.0959,
      -1.0736,
      0.5214,
      0.0959,
      -1.0736,
      -1.2313,
      -2.1019,
      -1.3776,
      0.8722,
      -2.1019,
      -1.3776,
      0.8722,
      -0.0,
      -0.0,
      -1.7648,
      -5.9763,
      3.0221,
      1.7648,
      5.9763,
      -3.0221,
      -0.0,
      -0.8134,
      -1.7552,
      0.9137,
      0.8134,
      1.7552,
      -0.9137,
      -0.1108,
      0.8746,
      -0.1604,
      0.1366,
      0.202,
      -1.6243,
      0.1366,
      0.202,
      -1.6243,
      -1.2071,
      -1.131,
      1.3775,
      0.889,
      -1.131,
      1.3775,
      0.889,
      -0.0,
      0.0,
      0.0204,
      -0.6587,
      0.0087,
      -0.0204,
      0.6587,
      -0.0087,
      -0.0,
      0.0023,
      2.6989,
      -0.3197,
      -0.0023,
      -2.6989,
      0.3197,
      0.6256,
      0.7438,
      0.6187,
      0.6658,
      0.051,
      0.6187,
      0.6658,
      0.051,
      0.7575,
      0.6524,
      1.6058,
      0.3235,
      0.6524,
      1.6058,
      0.3235,
      0.0,
      0.1745,
      -0.1345,
      -0.3261,
      -0.4966,
      2.1891,
      -0.3261,
      -0.4966,
      2.1891,
      -0.2848,
      -0.5012,
      0.1651,
      -0.829,
      -0.5012,
      0.1651,
      -0.829,
      -0.0,
      -0.0,
      -0.027,
      0.8621,
      1.0861,
      0.027,
      -0.8621,
      -1.0861,
      0.0,
      0.0661,
      -1.6331,
      0.4103,
      -0.0661,
      1.6331,
      -0.4103,
      -0.3379,
      -0.2144,
      -0.4283,
      -2.6192,
      -6.2112,
      -0.4283,
      -2.6192,
      -6.2112,
      -0.3549,
      -0.3261,
      -1.4313,
      -0.746,
      -0.3261,
      -1.4313,
      -0.746,
      0.0
    );
    //nervousaxis = new Array(-2.287 , 2.908 , -16.651 , 5.744 , 14.554 , -33.851 , -20.618 , 9.088 , 25.190 , -19.420 , 9.773 , 27.284 , -6.213 , -2.409 , -2.146 , 4.020 , -1.084 , 3.827 , 29.288 , 29.115 , -16.231 , -10.515 , 12.662 , 0.258 , 31.078 , -7.317 , -9.473 , -40.609 , -12.230 , -6.967 , 12.955 , 39.596 , 38.175 , 8.914 , -31.218 , -28.038 , -39.623 , 14.060 , 40.087 , 0.767 , -14.678 , -17.046 , -6.624 , 6.314 , -6.487 , 37.435 , 4.840 , -1.573 , -2.283 , 4.341 , 13.433 , -3.273 , 1.866 , 0.639 , -2.534 , 7.995 , -3.446 , -2.084 , -13.153 , -2.749 , 2.835 , -2.930 , -3.446 , -4.662 , -29.192 , -10.719 , 4.237 , 7.290 , -20.091 , -2.371 , 20.000 , 8.858 , -9.948 , 3.162 , -2.977 , 22.105 , -0.843 , -0.815 , 0.602 , -10.290 , 8.431 , 0.328 , 4.564 , -7.348 , -2.205 , 8.903 , -5.180 , -4.243 , -4.616 , -0.797 , -3.384 , 0.000 , 3.143 , 2.198 , 1.778 , 6.803 , 1.117 , 4.080 , -5.675 , 5.129 , 1.673 , 7.182 , 6.798 , 4.107 , 3.658 , 3.637 , 2.433 , -2.698 , -4.001 , -3.555 , 17.976 , 66.514 , -0.269 , 33.184 , 4.939 , -4.625 , -25.991 , -23.518 , -4.901 , -11.346 , -2.794 , -11.076 , 1.433 , 1.510 , 2.955 , 1.983 , 14.310 , 1.577 , -5.809 , 5.433 , 0.024 , -0.233 , -5.113 , 1.855 , 3.111 , 1.495 , -1.437 , 0.000 , -1.292 , -1.089 , -1.282 , -0.954 , 0.120 , -0.445 , -0.658 , 0.057 , -1.321 , 3.068 , 2.974 , -0.881 , 3.162 , -0.750 , 1.399 , -2.486 , -0.341 , 1.460 , 16.072 , 4.979 , -3.699 , 1.362 , 12.895 , 0.774 , 0.454 , 6.029 , -3.401 , -1.118 , -3.024 , 5.399 , 0.837 , 1.328 , 1.213 , -1.793 , 17.039 , 1.779 , 6.626 , 0.916 , 1.067 , 3.723 , 8.428 , 1.527 , 0.936 , 1.160 , -0.359 , 0.000 , 0.981 , 0.385 , 0.352 , -4.928 , -6.175 , 0.786 , -2.188 , -3.641 , 0.442 , 2.902 , 3.946 , 1.048 , 2.034 , 0.922 , 2.114 , 5.139 , 6.255 , 5.356 , -11.575 , -4.892 , 6.041 , 0.654 , -3.698 , 6.280 , -20.902 , 2.919 , 7.282 , 7.308 , 6.329 , -6.835 , 5.397 , 5.082 , 5.311 , 3.978 , 3.084 , 4.996 , 7.487 , 2.356 , 5.127 , 3.372 , 9.868 , 5.948 , 9.372 , 4.924 , -0.740 , 0.000);
    this.nervousaxis = new Array(
      -1.0613,
      -0.821,
      -1.8043,
      -0.5157,
      2.1642,
      -1.8043,
      -0.5157,
      2.1642,
      5.2605,
      4.5031,
      -2.39,
      -3.1998,
      4.5031,
      -2.39,
      -3.1998,
      0.0,
      0.0,
      -3.4102,
      -8.8182,
      -7.2103,
      3.4102,
      8.8182,
      7.2103,
      0.0,
      -5.8844,
      -1.4642,
      -1.1988,
      5.8844,
      1.4642,
      1.1988,
      -0.3916,
      0.8593,
      2.6226,
      0.9413,
      3.8563,
      2.6226,
      0.9413,
      3.8563,
      -1.4308,
      -1.0478,
      -0.1072,
      1.2633,
      -1.0478,
      -0.1072,
      1.2633,
      -2.0459,
      0.0,
      0.0,
      0.6851,
      -1.1212,
      -2.9323,
      -0.6851,
      1.1212,
      2.9323,
      0.0,
      0.4078,
      0.8162,
      -0.0105,
      -0.4078,
      -0.8162,
      0.0105,
      -1.131,
      -1.2276,
      -0.885,
      -1.5478,
      -1.9061,
      -0.885,
      -1.5478,
      -1.9061,
      -1.837,
      -1.5449,
      1.8035,
      -0.5713,
      -1.5449,
      1.8035,
      -0.5713,
      0.0,
      0.0,
      -0.2618,
      -0.2242,
      -1.2652,
      0.2618,
      0.2242,
      1.2652,
      0.0,
      -0.1118,
      -0.5967,
      -0.5518,
      0.1118,
      0.5967,
      0.5518,
      0.0098,
      0.0,
      0.0,
      1.4701,
      -2.2455,
      -8.0535,
      -1.4701,
      2.2455,
      8.0535,
      0.0,
      0.3476,
      7.0096,
      9.1967,
      -0.3476,
      -7.0096,
      -9.1967,
      -0.8198,
      -0.2844,
      -0.3269,
      -0.0582,
      1.6457,
      -0.3269,
      -0.0582,
      1.6457,
      0.0296,
      0.6243,
      0.9555,
      -1.4787,
      0.6243,
      0.9555,
      -1.4787,
      0.0,
      0.0,
      0.9737,
      1.7411,
      -2.7311,
      -0.9737,
      -1.7411,
      2.7311,
      0.0,
      0.8674,
      -0.9704,
      -2.3,
      -0.8674,
      0.9704,
      2.3,
      0.6398,
      0.4121,
      0.4235,
      0.5171,
      -0.1811,
      0.2407,
      0.5171,
      -0.1811,
      0.2407,
      -0.1691,
      -0.2593,
      0.9991,
      -0.0256,
      -0.2593,
      0.9991,
      -0.0256,
      -0.0,
      -0.0,
      -0.0541,
      0.456,
      -0.1225,
      0.0541,
      -0.456,
      0.1225,
      -0.0,
      0.0223,
      -1.7969,
      1.084,
      -0.0223,
      1.7969,
      -1.084,
      -0.0926,
      -0.0788,
      0.0659,
      0.585,
      1.1687,
      0.0659,
      0.585,
      1.1687,
      -0.1082,
      -0.1027,
      0.7602,
      1.2296,
      -0.1027,
      0.7602,
      1.2296,
      0.0,
      0.6338,
      0.4057,
      0.7086,
      0.7916,
      -0.505,
      0.7086,
      0.7916,
      -0.505,
      0.0052,
      0.0977,
      1.0338,
      0.6793,
      0.0977,
      1.0338,
      0.6793,
      0.0,
      0.0,
      0.0979,
      0.3352,
      -0.0231,
      -0.0979,
      -0.3352,
      0.0231,
      0.0,
      -0.0186,
      1.3285,
      -0.1588,
      0.0186,
      -1.3285,
      0.1588,
      -1.6219,
      -1.5165,
      -1.5348,
      -0.8587,
      0.4141,
      -1.5348,
      -0.8587,
      0.4141,
      -1.6525,
      -1.7025,
      -0.6022,
      0.6399,
      -1.7025,
      -0.6022,
      0.6399,
      0.0
    );
    //happyaxis = new Array(-8.219 , -1.906 , -7.623 , 0.408 , -19.081 , 8.870 , 0.108 , -4.284 , 2.965 , 11.059 , 16.140 , -8.834 , 15.464 , -0.262 , 8.591 , -9.201 , -13.472 , -17.290 , 9.633 , 1.238 , 9.669 , 8.260 , 22.596 , -21.118 , 11.766 , 4.971 , 5.895 , -6.484 , 9.623 , -22.325 , 11.800 , -17.346 , -16.952 , 8.816 , 8.040 , 2.651 , 4.087 , -22.935 , -13.564 , 4.358 , 7.398 , 3.804 , 5.470 , -7.469 , -7.214 , -29.394 , 8.923 , -1.849 , -4.309 , -2.973 , -15.982 , 7.090 , -7.383 , -4.195 , -4.546 , -2.323 , -10.124 , 5.763 , 5.803 , 5.974 , -5.615 , -1.781 , -1.338 , -5.520 , -94.922 , 1.745 , -6.901 , -13.356 , -50.887 , 2.196 , 95.403 , 58.875 , 5.099 , 36.130 , -0.985 , 34.842 , 0.521 , 0.520 , 3.960 , 7.504 , 10.885 , 4.785 , 8.205 , -16.561 , -3.277 , -11.076 , 1.402 , -4.160 , -10.744 , 0.532 , 2.105 , 0.000 , -0.122 , -2.000 , -4.699 , -1.435 , -5.409 , -1.381 , -2.620 , -0.636 , -4.523 , -2.745 , -1.900 , -1.964 , -4.528 , -1.761 , -5.267 , -0.206 , 2.383 , 4.330 , 32.135 , -15.557 , 1.202 , -8.912 , 31.165 , -0.652 , -33.659 , 4.719 , -0.126 , 3.644 , 0.744 , -17.364 , -1.496 , -1.591 , 0.685 , -6.186 , -0.021 , 0.669 , 3.462 , 9.436 , -4.017 , -2.361 , -4.384 , -3.470 , -6.332 , -1.449 , -9.257 , 0.000 , 0.649 , 0.231 , 0.247 , 2.660 , 4.590 , 0.884 , 2.743 , 2.244 , 0.240 , -3.296 , -3.773 , 0.790 , 0.053 , 0.820 , -1.213 , -2.176 , -4.631 , -5.130 , 3.443 , -7.171 , -3.780 , -8.636 , -17.643 , -5.361 , 4.425 , -1.559 , -3.585 , -4.384 , -3.887 , -14.685 , 13.628 , 13.678 , 13.790 , -10.930 , 14.037 , 13.683 , 13.533 , 7.234 , 13.949 , -12.307 , 15.431 , 13.946 , 13.199 , 13.549 , 6.375 , 0.000 , 0.396 , 0.579 , 0.130 , -0.731 , -0.065 , 0.428 , 2.272 , -0.187 , 0.149 , 1.066 , -4.061 , -0.095 , -3.388 , 0.204 , -1.565 , 2.444 , -0.486 , -0.133 , -2.218 , 2.183 , 2.915 , 2.997 , 2.169 , -0.273 , 2.272 , -0.831 , 1.643 , 2.072 , 2.533 , 14.253 , 8.068 , 7.919 , 8.262 , 2.336 , 7.908 , 8.625 , 9.178 , 0.537 , 7.357 , -2.985 , 16.442 , 8.388 , 12.084 , 8.269 , 4.261 , 0.000);
    this.happyaxis = new Array(
      -8.6794,
      -1.7747,
      -1.5481,
      4.31,
      6.9911,
      -1.5481,
      4.31,
      6.9911,
      3.1253,
      2.5996,
      -2.806,
      -4.9278,
      2.5996,
      -2.806,
      -4.9278,
      0.0,
      0.0,
      0.962,
      2.0038,
      -2.0868,
      -0.962,
      -2.0038,
      2.0868,
      0.0,
      -0.9153,
      0.6929,
      0.8262,
      0.9153,
      -0.6929,
      -0.8262,
      -0.5683,
      -2.8263,
      0.6213,
      1.5682,
      8.4073,
      0.6213,
      1.5682,
      8.4073,
      -5.6247,
      -5.2527,
      -1.6787,
      -0.5363,
      -5.2527,
      -1.6787,
      -0.5363,
      -1.5082,
      -0.0,
      -0.0,
      0.1326,
      0.0334,
      -1.2031,
      -0.1326,
      -0.0334,
      1.2031,
      -0.0,
      -0.0166,
      1.402,
      -0.0094,
      0.0166,
      -1.402,
      0.0094,
      -1.8669,
      -1.0253,
      -1.2861,
      0.692,
      2.3059,
      -1.2861,
      0.692,
      2.3059,
      0.7367,
      1.1667,
      0.9416,
      0.7376,
      1.1667,
      0.9416,
      0.7376,
      0.0,
      0.0,
      0.9646,
      1.7762,
      1.7615,
      -0.9646,
      -1.7762,
      -1.7615,
      0.0,
      0.0193,
      0.2822,
      -0.9076,
      -0.0193,
      -0.2822,
      0.9076,
      -0.0079,
      0.0,
      0.0,
      0.0118,
      -14.4016,
      -31.9493,
      -0.0118,
      14.4016,
      31.9493,
      0.0,
      1.5234,
      8.486,
      10.9683,
      -1.5234,
      -8.486,
      -10.9683,
      1.1512,
      0.2682,
      0.824,
      -3.3852,
      -3.056,
      0.824,
      -3.3852,
      -3.056,
      -0.0806,
      0.6421,
      0.6678,
      0.588,
      0.6421,
      0.6678,
      0.588,
      -0.0,
      -0.0,
      -1.2401,
      -0.6639,
      -12.6719,
      1.2401,
      0.6639,
      12.6719,
      -0.0,
      1.287,
      0.509,
      -1.4226,
      -1.287,
      -0.509,
      1.4226,
      0.4348,
      0.0625,
      0.7678,
      0.512,
      0.0455,
      1.0448,
      0.512,
      0.0455,
      1.0448,
      0.7228,
      0.7156,
      0.7774,
      -1.725,
      0.7156,
      0.7774,
      -1.725,
      -0.0,
      -0.0,
      0.1379,
      -0.5607,
      0.1023,
      -0.1379,
      0.5607,
      -0.1023,
      0.0,
      0.0211,
      -0.3209,
      -0.1831,
      -0.0211,
      0.3209,
      0.1831,
      -1.31,
      -1.3459,
      -1.5276,
      -2.2644,
      -2.1648,
      -1.5276,
      -2.2644,
      -2.1648,
      -1.2943,
      -1.2589,
      -0.9913,
      0.4115,
      -1.2589,
      -0.9913,
      0.4115,
      0.0,
      0.1264,
      0.1792,
      0.1448,
      -0.8062,
      -2.4713,
      0.1448,
      -0.8062,
      -2.4713,
      0.0947,
      0.1504,
      -0.1653,
      0.3469,
      0.1504,
      -0.1653,
      0.3469,
      0.0,
      -0.0,
      -0.1554,
      -0.1843,
      -1.0699,
      0.1554,
      0.1843,
      1.0699,
      -0.0,
      -0.0887,
      0.5868,
      0.6541,
      0.0887,
      -0.5868,
      -0.6541,
      -2.398,
      -2.3095,
      -2.0347,
      0.5274,
      6.2302,
      -2.0347,
      0.5274,
      6.2302,
      -2.2071,
      -2.223,
      -0.5295,
      -0.113,
      -2.223,
      -0.5295,
      -0.113,
      0.0
    );
    this.customaxis = new Array(
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    );

    this.bodyStructure = 0;
    this.weight = 0;
    this.nervousness = 0;
    this.happiness = 0;

    //camera iables
    // this.azimuth = 0;
    // this.elevation = 0;
    this.camera_distance = 1000;
    // this.angularVelocity = 0;
    this.walker_xaxis = 0;
    this.walker_yaxis = 0;
    this.walker_zaxis = 1;

    this.walker_rot_xaxis = 0;
    this.walker_rot_yaxis = 0;
    this.walker_rot_zaxis = 0;

    //general stuff
    // this.walker_initphase = 0;
    // this.walker_speed = 1;
    this.walker_sticks = true;

    // this.walker_scrambling = 0;
    // this.flicker_ontime = 100;
    // this.flicker_duration = 1;
    // this.flicker_randomness = 0;
    this.camera_perspective = 0;
    // this.walker_scrambling_horiz = true;
    // this.walker_scrambling_vert = true;
    // this.walker_scrambling_phase = 0;

    // this.markers_invisible = null;

    //fun stuff
    this.walker_translation_speed = 0;

    //--------------INTERNAL IABLES--------------------

    this.walkerxmin = 0;
    this.walkerymin = 0;
    this.walkerzmin = 0;
    this.walkerxmax = 0;
    this.walkerymax = 0;
    this.walkerzmax = 0;
    this.walkerxoff = 0;
    this.walkeryoff = 0;
    this.walkerzoff = 0;
    this.walkersizefactor = 0;

    this.axisrot = 0;
    this.nummarkers = 0;
    // this.durationstd = 0;
    // this.dotsonratio = 0;
    // this.dotduration = 0;
    // this.durationon = 0;
    // this.durationoff = 0;

    //arrays of stuff
    // this.scramblewalker = [];
    // this.scramblewalkerinit = [];
    this.catwalker = [];
    this.pigeonwalker = [];
    // this.walker_scrambling_phases = [];

    //flicker stuff
    // this.dottime = [];
    // this.dotstats = [];

    //marker stuff
    this.markers = [];

    this.head = true;
    this.clavicles = true;
    this.rhip = true;
    this.lhip = true;
    this.belly = true;

    this.rsh = true;
    this.re = true;
    this.rh = true;

    this.lsh = true;
    this.le = true;
    this.lh = true;

    this.rknee = true;
    this.lknee = true;

    this.rankle = true;
    this.lankle = true;

    ////

    this.init();
  }

  // API: Get markers
  getMarkers(wh, tmsec = undefined) {
    let markers = [];

    if (tmsec === undefined) {
      tmsec = this.tm.getTimer() - this.starttime;
    }
    // console.log(tmsec);

    const curtime = tmsec;

    /////

    const invis = new Array(this.nummarkers);
    invis.fill(false);
    var i;

    var walkertime = 0;
    if (this.speed != 0) {
      walkertime = this.calcTime(curtime);
      //console.log(walkertime)
    }

    //translation calculation  // ちょっとよくわかっていない
    if (this.flagTranslation && this.type == 0) {
      this.translation_pos = Math.round((this.getTranslationSpeed() * 120 * curtime) / 1000);

      this.translation_pos =
        (this.translation_pos % (this.translation_end - this.translation_start)) +
        this.translation_start;
    } else {
      this.translation_pos = 0;
    }

    //CALCULATE MARKER POSITIONS
    for (i = 0; i < this.nummarkers * 3 + 1; i++) {
      this.markers[i] = this.sample(i, walkertime, true);
    }
    //draw walker, rotating by azimuth, axisrot, elevation and spinmatrix
    var matrix = this.mtrx.rotateaxis(
      -this.axisrot,
      this.walker_rot_xaxis,
      this.walker_rot_yaxis,
      this.walker_rot_zaxis
    );

    matrix = this.mtrx.multmatrix(this.mtrx.translate(this.translation_pos, 0, 0), matrix);
    matrix = this.mtrx.multmatrix(
      this.mtrx.rotateaxis(this.azimuth + (curtime * this.angularVelocity) / 1000, 0, 0, 1),
      matrix
    );

    matrix = this.mtrx.multmatrix(this.spinmatrix, matrix);
    matrix = this.mtrx.multmatrix(this.mtrx.rotateY(this.elevation), matrix);

    var vectors = new Array(this.nummarkers);
    var vector = new Array(4);
    var v2 = new Array(4);
    var v3 = new Array(4);

    for (i = 0; i < this.nummarkers; i++) {
      vector[0] = this.markers[i] + this.walkerxoff + this.data_offset_x;
      vector[1] =
        this.markers[i + this.nummarkers] +
        this.walkeryoff * this.structure_vertical_scale +
        this.data_offset_y;
      vector[2] = this.markers[i + this.nummarkers * 2] + this.walkerzoff + this.data_offset_z;
      vector[3] = 1;

      v2 = this.mtrx.multmatrixvector(matrix, vector);
      v2[0] -= this.camera_distance;
      v2[3] = 1;

      if (this.camera_perspective > 0) {
        var persp = this.mtrx.perspective(this.camera_distance);
        v3 = this.mtrx.multmatrixvector(persp, v2);
        v3[0] = v3[0] / v3[3];
        v3[1] = v3[1] / v3[3];
        v3[2] = v3[2] / v3[3];

        if (v2[0] > 0 || v3[3] == 0) {
          invis[i] = true;
        }
      } else {
        v3 = v2;
      }
      // this.currentmatrix[i] = v3;

      // console.log(v3)
      //nudge up
      var xpos =
        this.offsety + (v3[1] / this.walkersizefactor) * this.walker_size * this.pixelsperdegree;
      var ypos =
        this.offsetz - (v3[2] / this.walkersizefactor) * this.walker_size * this.pixelsperdegree;
      vectors[i] = v3;

      // if(this.markers_invisible[i])
      // {
      //   invis[i] = 1;
      // }

      [
        this.head,
        this.clavicles,
        this.lsh,
        this.le,
        this.lh,
        this.rsh,
        this.re,
        this.rh,
        this.belly,
        this.lhip,
        this.lknee,
        this.lankle,
        this.rhip,
        this.rknee,
        this.rankle,
      ].forEach((e, i) => {
        if (!e) {
          invis[i] = true;
        }
      });

      if (!invis[i]) {
        // console.log(xpos, ypos);
        const descs = [
          'Head',
          'Clavicles',
          'L-Shoulder',
          'L-Elbow',
          'L-Hand',
          'R-Shoulder',
          'R-Elbow',
          'R-Hand',
          'Belly',
          'L-Hip',
          'L-Knee',
          'L-Ankle',
          'R-Hip',
          'R-Knee',
          'R-Ankle',
        ];
        markers.push({ x: xpos, y: ypos, desc: descs[i] });
      }
    }

    if (this.walker_sticks) {
      if (this.type == 0) {
        // ★
        // this.drawLineX(vectors, 0, 1, invis);
        // this.drawLineX(vectors, 1, 2, invis);
        // this.drawLineX(vectors, 2, 3, invis);
        // this.drawLineX(vectors, 3, 4, invis);
        // this.drawLineX(vectors, 1, 5, invis);
        // this.drawLineX(vectors, 5, 6, invis);
        // this.drawLineX(vectors, 6, 7, invis);
        // this.drawLineX(vectors, 1, 8, invis);
        // this.drawLineX(vectors, 8, 9, invis);
        // this.drawLineX(vectors, 9, 10, invis);
        // this.drawLineX(vectors, 10, 11, invis);
        // this.drawLineX(vectors, 8, 12, invis);
        // this.drawLineX(vectors, 12, 13, invis);
        // this.drawLineX(vectors, 13, 14, invis);
      }
    } // temporary

    ////

    // get markers
    // markers = [
    //   { x: 0, y: 0, desc: '1' },
    //   { x: 0, y: wh, desc: '2' },
    //   { x: wh / 2, y: wh, desc: '3' },
    //   { x: wh / 2, y: 0, desc: '4' },
    // ];

    return markers;
  }

  // API: Get Indices of markers that make up the line.
  getLineMarkerIndices() {
    return [
      [0, 1],
      [1, 2],
      [2, 3],
      [3, 4],
      [1, 5],
      [5, 6],
      [6, 7],
      [1, 8],
      [8, 9],
      [9, 10],
      [10, 11],
      [8, 12],
      [12, 13],
      [13, 14],
    ];
  }

  // API: Get markers that make up the line.
  getLineMarkers(wh) {
    const markers = this.getMarkers(wh);

    const lineMarkers = [];

    const idxsArray = this.getLineMarkerIndices();
    idxsArray.forEach((idxs) => {
      const i0 = idxs[0];
      const i1 = idxs[1];

      lineMarkers.push([
        { x: markers[i0].x, y: markers[i0].y },
        { x: markers[i1].x, y: markers[i1].y },
      ]);
    });

    return lineMarkers;
  }

  // API: Set speed
  setSpeed(speed = 1.0) {
    const freq = this.getFrequency();
    // avoid 0 divisor
    if (speed === 0) {
      speed += 0.001;
    }
    this.speed = this.clamp(BMWalker.minSpeed, BMWalker.maxSpeed, speed);

    this.init();
    let difffreq = freq / this.getFrequency();
    // avoid 0 divisor
    if (abs(difffreq) < 0.005) {
      difffreq += 0.01;
    }
    const t = this.tm.getTimer();
    this.starttime = t - (t - this.starttime) / difffreq;
    // console.log(freq, difffreq, t, this.starttime);
  }

  // API: ...
  setWalkerParam(bodyStructure, weight, nervousness, happiness) {
    const freq = this.getFrequency();

    // Body Structure Parameter
    if (bodyStructure !== undefined) {
      this.bodyStructure = this.clamp(
        BMWalker.minBodyStructure,
        BMWalker.maxBodyStructure,
        bodyStructure
      );
    }

    // Weight Parameter
    if (weight !== undefined) {
      this.weight = this.clamp(BMWalker.minWeight, BMWalker.maxWeight, weight);
    }

    // Nervousness Parameter
    if (nervousness !== undefined) {
      this.nervousness = this.clamp(BMWalker.minNervousness, BMWalker.maxNervousness, nervousness);
    }

    // Happiness Parameter
    if (happiness !== undefined) {
      this.happiness = this.clamp(BMWalker.minHappiness, BMWalker.maxHappiness, happiness);
    }

    this.init();
    let difffreq = freq / this.getFrequency();
    // avoid 0 divisor
    if (abs(difffreq) < 0.005) {
      difffreq += 0.01;
    }
    const t = this.tm.getTimer();
    this.starttime = t - (t - this.starttime) / difffreq;
  }

  // API: ...
  setCameraParam(azimuth, angularVelocity, elevation) {
    // Camera azimuth(rotation) Parameter
    if (azimuth !== undefined) {
      this.azimuth = azimuth;
    }

    // Camera angular velocity(rotation speed) Parameter
    if (angularVelocity !== undefined) {
      this.angularVelocity = angularVelocity;
    }

    // Camera elevation Parameter
    if (elevation !== undefined) {
      this.elevation = elevation;
    }
  }

  // API: ...
  setTranslationParam(flagTranslation) {
    if (flagTranslation !== undefined) {
      this.flagTranslation = flagTranslation;
    }
  }

  // Internal
  clamp(min, max, val) {
    return Math.min(max, Math.max(min, val));
  }

  init() {
    this.nummarkers = (this.meanwalker[this.type].length / 5 - 1) / 3;
    this.markers = new Array(this.nummarkers * 3);
    this.recalc_angle();
    this.calcsize();
    this.walker_translation_speed = this.calcTranslationSpeed();
  }

  recalc_angle() {
    var res = this.mtrx.angleBetween(0, 0, 1, 0, 0, 1);
    this.walker_rot_xaxis = res[0];
    this.walker_rot_yaxis = res[1];
    this.walker_rot_zaxis = res[2];
    this.axisrot = res[3];
  }

  calcsize() {
    let n;

    // Calc min/max of x, y, z.
    for (n = 0; n < this.nummarkers; n++) {
      this.walkerxmin = Math.min(this.walkerxmin, this.meanwalker[this.type][n]);
      this.walkerxmax = Math.max(this.walkerxmax, this.meanwalker[this.type][n]);
    }
    for (n = this.nummarkers; n < this.nummarkers * 2; n++) {
      this.walkerymin = Math.min(this.walkerymin, this.meanwalker[this.type][n]);
      this.walkerymax = Math.max(this.walkerymax, this.meanwalker[this.type][n]);
    }
    for (n = this.nummarkers * 2; n < this.nummarkers * 3; n++) {
      this.walkerzmin = Math.min(this.walkerzmin, this.meanwalker[this.type][n]);
      this.walkerzmax = Math.max(this.walkerzmax, this.meanwalker[this.type][n]);
    }

    // The walker height in mm. Used later on to scale it to the desired size in degrees.
    this.walkersizefactor = this.walkerzmax - this.walkerzmin;

    this.walkerxoff = -(this.walkerxmax + this.walkerxmin) / 2;
    this.walkeryoff = -(this.walkerymax + this.walkerymin) / 2;
    this.walkerzoff = -(this.walkerzmax + this.walkerzmin) / 2;
  } // end of calsize()

  sample(i, walkertime, includeStructure) {
    var phase = 0; //this.walker_scrambling_phases[i % this.nummarkers];
    var genderval = this.bodyStructure;

    var initialpos = this.meanwalker[this.type][i];

    if (includeStructure) {
      if (this.type == 0) {
        initialpos +=
          this.genderaxis[i] * genderval +
          this.weightaxis[i] * this.weight +
          this.nervousaxis[i] * this.nervousness +
          this.happyaxis[i] * this.happiness;
      }

      // if (this.walker_scrambling > 0) {
      //   if (
      //     (i >= this.nummarkers * 2 && this.walker_scrambling_vert) ||
      //     (i < this.nummarkers * 2 && this.walker_scrambling_horiz)
      //   )
      //     initialpos = this.scramblewalker[i];
      // }

      //invert or scale structure
      if (i >= this.nummarkers * 2 && i < this.nummarkers * 3)
        initialpos *= this.structure_vertical_scale;
      else initialpos *= this.structure_horizontal_scale;
    } else {
      initialpos = 0;
    }

    //motion!
    var motionpos = 0;
    if (this.type == 0) {
      motionpos =
        (this.meanwalker[this.type][i + (this.nummarkers * 3 + 1)] +
          this.genderaxis[i + (this.nummarkers * 3 + 1)] * genderval +
          this.weightaxis[i + (this.nummarkers * 3 + 1)] * this.weight +
          this.nervousaxis[i + (this.nummarkers * 3 + 1)] * this.nervousness +
          this.happyaxis[i + (this.nummarkers * 3 + 1)] * this.happiness) *
          Math.sin(walkertime + phase) +
        (this.meanwalker[this.type][i + (this.nummarkers * 3 + 1) * 2] +
          this.genderaxis[i + (this.nummarkers * 3 + 1) * 2] * genderval +
          this.weightaxis[i + (this.nummarkers * 3 + 1) * 2] * this.weight +
          this.nervousaxis[i + (this.nummarkers * 3 + 1) * 2] * this.nervousness +
          this.happyaxis[i + (this.nummarkers * 3 + 1) * 2] * this.happiness) *
          Math.cos(walkertime + phase) +
        (this.meanwalker[this.type][i + (this.nummarkers * 3 + 1) * 3] +
          this.genderaxis[i + (this.nummarkers * 3 + 1) * 3] * genderval +
          this.weightaxis[i + (this.nummarkers * 3 + 1) * 3] * this.weight +
          this.nervousaxis[i + (this.nummarkers * 3 + 1) * 3] * this.nervousness +
          this.happyaxis[i + (this.nummarkers * 3 + 1) * 3] * this.happiness) *
          Math.sin(2 * (walkertime + phase)) +
        (this.meanwalker[this.type][i + (this.nummarkers * 3 + 1) * 4] +
          this.genderaxis[i + (this.nummarkers * 3 + 1) * 4] * genderval +
          this.weightaxis[i + (this.nummarkers * 3 + 1) * 4] * this.weight +
          this.nervousaxis[i + (this.nummarkers * 3 + 1) * 4] * this.nervousness +
          this.happyaxis[i + (this.nummarkers * 3 + 1) * 4] * this.happiness) *
          Math.cos(2 * (walkertime + phase));
    } else {
      motionpos =
        this.meanwalker[this.type][i + (this.nummarkers * 3 + 1)] * Math.sin(walkertime + phase) +
        this.meanwalker[this.type][i + (this.nummarkers * 3 + 1) * 2] *
          Math.cos(walkertime + phase) +
        this.meanwalker[this.type][i + (this.nummarkers * 3 + 1) * 3] *
          Math.sin(2 * (walkertime + phase)) +
        this.meanwalker[this.type][i + (this.nummarkers * 3 + 1) * 4] *
          Math.cos(2 * (walkertime + phase));
    }

    if (i >= this.nummarkers * 2 && i < this.nummarkers * 3)
      motionpos *= this.motion_vertical_scale;
    else motionpos *= this.motion_horizontal_scale;
    return initialpos + motionpos;
  }

  getFrequency() {
    var speed = this.meanwalker[this.type][this.nummarkers * 3];
    if (this.type == 0) {
      speed += this.bodyStructure * this.genderaxis[this.nummarkers * 3];
      speed += this.weight * this.weightaxis[this.nummarkers * 3];
      speed += this.nervousness * this.nervousaxis[this.nummarkers * 3];
      speed += this.happiness * this.happyaxis[this.nummarkers * 3];
    }
    //console.log(speed)
    return speed / this.speed;
  }

  calcTranslationSpeed() {
    var tspeed = this.meanwalker[this.type][(this.nummarkers * 3 + 1) * 3 - 1];
    //tspeed*120 = 1356.168
    if (this.type == 0) {
      tspeed += this.bodyStructure * this.genderaxis[(this.nummarkers * 3 + 1) * 3 - 1];
      tspeed += this.weight * this.weightaxis[(this.nummarkers * 3 + 1) * 3 - 1];
      tspeed += this.nervousness * this.nervousaxis[(this.nummarkers * 3 + 1) * 3 - 1];
      tspeed += this.happiness * this.happyaxis[(this.nummarkers * 3 + 1) * 3 - 1];
    }

    return tspeed * 120;
  }

  getTranslationSpeed() {
    return this.speed * (this.walker_translation_speed / 120);
  }

  calcTime(curtime) {
    return ((curtime * 2 * Math.PI) / 1000) * (120 / this.getFrequency());
  }
}

// Simple Time class
class BMWTimer {
  // Constructor
  constructor() {
    const d = new Date().valueOf();
    this.time = d;
    this.start = d;

    const precision = 10; // 10msec
    setInterval(
      function () {
        this.time += precision;
      }.bind(this),
      precision
    );
  }

  getTimer() {
    return this.time - this.start;
  }
}

//// Matrix calculation
class BMWMatrix {
  constructor() {}

  newMatrix() {
    const m = [new Array(4), new Array(4), new Array(4), new Array(4)];
    return m;
  }

  // Identity matrix
  newIdentMatrix() {
    const m = [
      [1, 0, 0, 0],
      [0, 1, 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1],
    ];
    return m;
  }

  rotateY(angle) {
    const m = [
      [Math.cos(angle), 0, Math.sin(angle), 0],
      [0, 1, 0, 0],
      [-Math.sin(angle), 0, Math.cos(angle), 0],
      [0, 0, 0, 1],
    ];
    return m;
  }

  rotateX(angle) {
    const m = [
      [1, 0, 0, 0],
      [0, Math.cos(angle), -Math.sin(angle), 0],
      [0, Math.sin(angle), Math.cos(angle), 0],
      [0, 0, 0, 1],
    ];
    return m;
  }

  rotateZ(angle) {
    const m = [
      [Math.cos(angle), Math.sin(angle), 0, 0],
      [-Math.sin(angle), Math.cos(angle), 0, 0],
      [0, 0, 1, 0],
      [0, 0, 0, 1],
    ];
    return m;
  }

  perspective(zfar) {
    const znear = 1;
    const f = zfar;
    const m = [
      [(zfar + znear) / (znear - zfar), (2 * zfar * znear) / (znear - zfar), 0, 0],
      [0, f, 0, 0],
      [0, 0, f, 0],
      [-1, 0, 0, 0],
    ];
    return m;
  }

  translate(tx, ty, tz) {
    const m = [
      [1, 0, 0, tx],
      [0, 1, 0, ty],
      [0, 0, 1, tz],
      [0, 0, 0, 1],
    ];
    return m;
  }

  rotateaxis(angle, rx, ry, rz) {
    const c = Math.cos(angle);
    const s = Math.sin(angle);

    const len = Math.sqrt(rx * rx + ry * ry + rz * rz);
    rx = rx / len;
    ry = ry / len;
    rz = rz / len;
    const m = [
      [rx * rx * (1 - c) + c, rx * ry * (1 - c) - rz * s, rx * rz * (1 - c) + ry * s, 0],
      [ry * rx * (1 - c) + rz * s, ry * ry * (1 - c) + c, ry * rz * (1 - c) - rx * s, 0],
      [rz * rx * (1 - c) - ry * s, rz * ry * (1 - c) + rx * s, rz * rz * (1 - c) + c, 0],
      [0, 0, 0, 1],
    ];
    return m;
  }

  multmatrix(m1, m2) {
    const m3 = this.newMatrix();
    let r = 0;
    let c = 0;

    for (r = 0; r < 4; r++) {
      for (c = 0; c < 4; c++) {
        m3[r][c] = 0;
      }
    }

    for (r = 0; r < 4; r++) {
      for (c = 0; c < 4; c++) {
        for (let i = 0; i < 4; i++) {
          m3[r][c] += m1[r][i] * m2[i][c];
        }
      }
    }
    return m3;
  }

  multmatrixvector(m, v) {
    const v2 = new Array(4);

    for (let i = 0; i < 4; i++) {
      v2[i] = 0;
    }

    for (let r = 0; r < 4; r++) {
      for (let i = 0; i < 4; i++) {
        v2[r] += m[r][i] * v[i];
      }
    }
    return v2;
  }

  multvectormatrix(v, m) {
    const v2 = new Array(4);

    for (let i = 0; i < 4; i++) {
      v2[i] = 0;
    }

    for (let r = 0; r < 4; r++) {
      for (i = 0; i < 4; i++) {
        v2[r] += m[i][r] * v[i];
      }
    }
    return v2;
  }

  dotProd(x1, y1, z1, x2, y2, z2) {
    return x1 * x2 + y1 * y2 + z1 * z2;
  }

  angleBetween(x1, y1, z1, x2, y2, z2) {
    const axislen1 = Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    // x1 = x1/axislen1;
    // y1 = y1/axislen1;
    // z1 = z1/axislen1;

    const axislen2 = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
    // x2 = x2/axislen2;
    // y2 = y2/axislen2;
    // z2 = z2/axislen2;

    const angle = Math.acos(this.dotProd(x1, y1, z1, x2, y2, z2) / (axislen1 * axislen2));
    //console.log(angle)

    if (Math.abs(angle) < 0.0001) return [0, 0, 1, 0];
    // if (angle > 180) {
    //   angle = -(360 - angle);
    // }
    if (angle > PI) {
      angle = -(TAU - angle);
    }

    //cross product
    const x3 = y1 * z2 - z1 * y2;
    const y3 = z1 * x2 - x1 * z2;
    const z3 = x1 * y2 - y1 * x2;

    return [x3, y3, z3, angle];
  }
}
